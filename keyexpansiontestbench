--- AES temporary testbench---
--- Test Key expansion


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
library STD;
use IEEE.std_logic_textio.all;
use STD.textio.all;

entity keyexpansiontestbench is
end entity;

--------------------------

architecture testbench of keyexpansiontestbench is

signal clk_t : std_logic := '0';
signal en_t : std_logic := '0';
signal reset_t : std_logic := '1'; -- reset positive level 
-- hexa number
signal key_t : std_logic_vector(127 downto 0) := X"000102030405060708090a0b0c0d0e0f";
signal key_tr0 : std_logic_vector(127 downto 0);
signal key_tr1 : std_logic_vector(127 downto 0);
signal key_tr2 : std_logic_vector(127 downto 0);
signal key_tr3 : std_logic_vector(127 downto 0);
signal key_tr4 : std_logic_vector(127 downto 0);
signal key_tr5 : std_logic_vector(127 downto 0);
signal key_tr6 : std_logic_vector(127 downto 0);
signal key_tr7 : std_logic_vector(127 downto 0);
signal key_tr8 : std_logic_vector(127 downto 0);
signal key_tr9 : std_logic_vector(127 downto 0);
signal cnt : std_logic_vector(3 downto 0) := "0000";
component KEY_EXPANSION is
	port(
		clk : in std_logic; 
		reset : in std_logic;
		en: in std_logic;
		keyin : in std_logic_vector(127 downto 0);
		key_r0 : out std_logic_vector(127 downto 0);
		key_r1 : out std_logic_vector(127 downto 0);
		key_r2 : out std_logic_vector(127 downto 0);
		key_r3 : out std_logic_vector(127 downto 0);
		key_r4 : out std_logic_vector(127 downto 0);
		key_r5 : out std_logic_vector(127 downto 0);
		key_r6 : out std_logic_vector(127 downto 0);
		key_r7 : out std_logic_vector(127 downto 0);
		key_r8 : out std_logic_vector(127 downto 0);
		key_r9 : out std_logic_vector(127 downto 0)
	);
end component;


Begin
--create clock

create_clock: process
begin 
	wait for 12 ns;
	clk_t <= not clk_t after 50 ns;
end process create_clock;

-- create en signal for key expansion
create_en: process
begin 
	wait for 20 ns;
	en_t <= '1';
end process create_en;

-- create reset signal 
create_rst: process
begin
	wait for 100 ns;
	reset_t <= '0';
end process create_rst;


-- DUT 
dut: component KEY_EXPANSION port map (clk_t, reset_t, en_t, key_t, key_tr0, key_tr1,
key_tr2, key_tr3, key_tr4, key_tr5, key_tr6, key_tr7, key_tr8, key_tr9
);
--dut: component ROUND_KEY0 port map (clk_t, reset_t , key_t, key_tr0);
cl: process(reset_t, clk_t)
begin
	if reset_t = '1' then
		cnt <= (others => '0');
	elsif clk_t = '1' and clk_t'event then
		cnt <= cnt + '1';
	end if;
end process;



-- Print results-------------------------------------------------
test: process(cnt)
file file_pointer : text; --is out "Output_result.txt";
variable info: line;
variable test_cnt: integer :=0;
begin
-- open file --
	if(cnt = "1011") then
		file_open(file_pointer,"C:\\Users\\TieuKhanh\\Documents\\VLSI Project\\AES\\Test_Data\\key_expand", write_mode); 
		write(info, key_tr0);
		writeline(file_pointer, info);
		write(info, key_tr1);
		writeline(file_pointer, info);
		write(info, key_tr2);
		writeline(file_pointer, info);
		write(info, key_tr3);
		writeline(file_pointer, info);
		write(info, key_tr4);
		writeline(file_pointer, info);
		write(info, key_tr5);
		writeline(file_pointer, info);
		write(info, key_tr6);
		writeline(file_pointer, info);
		write(info, key_tr7);
		writeline(file_pointer, info);
		write(info, key_tr8);
		writeline(file_pointer, info);
		write(info, key_tr9);
		writeline(file_pointer, info);
    ----- input generator-----
    --test_cnt := test_cnt + 1;
    --assert test_cnt < 1024
		report "end simulation" severity NOTE;
--	 if test_cnt <256 then
--		file_close(file_RESULTS);
	end if; 

 
end process test;
end architecture;








