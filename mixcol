library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity MIXCOL is
	port(
		Din : in std_logic_vector(31 downto 0);
		Dout : out std_logic_vector(31 downto 0)
	);
end entity;

Architecture RTL of MIXCOL is

signal d0, d1, d2, d3 : std_logic_vector(7 downto 0);
signal q0, q1, q2, q3 : std_logic_vector(7 downto 0);
signal res0, res1, res2, res3 : std_logic_vector(7 downto 0);

component GMUL is
	port(
		Xin : in std_logic_vector(7 downto 0);
		Yout : out std_logic_vector(7 downto 0)
	);
end component;

Begin
	d0 <= Din(7 downto 0);
	d1 <= Din(15 downto 8);
	d2 <= Din(23 downto 16);
	d3 <= Din(31 downto 24);
	
	-- this block will calculate a x 2 and 
	-- xor with 0x1B if need, applying for all 4 bytes 
	-- next step will process the full arithmetic operation of 
	-- matrix multiplication in GF2
	
	Gmul0: component GMUL port map(d0, q0);
	Gmul1: component GMUL port map(d1, q1);
	Gmul2: component GMUL port map(d2, q2);
	Gmul3: component GMUL port map(d3, q3);
	
	res3 <= q3 xor (q2 xor d2) xor d1 xor d0;
	res2 <= d3 xor q2 xor (q1 xor d1) xor d0;
	res1 <= d3 xor d2 xor q1 xor (q0 xor d0);
	res0 <= (q3 xor d3) xor d2 xor d1 xor q0;
	
	Dout <= res3 & res2 & res1 & res0;
end Architecture;
	
	
	